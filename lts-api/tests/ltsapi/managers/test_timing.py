import time
from typing import List, Optional, Union
import pytest

from ltsapi.db import DBContext
from ltsapi.managers.timing import TimingManager, TypeUpdateTiming
from ltsapi.models.enum import (
    CompetitionStage,
    KartStatus,
    LengthUnit,
)
from ltsapi.models.timing import (
    UpdateTiming,
    UpdateTimingDriver,
    UpdateTimingPosition,
    UpdateTimingLastTime,
    UpdateTimingBestTime,
    UpdateTimingLap,
    UpdateTimingGap,
    UpdateTimingInterval,
    UpdateTimingStage,
    UpdateTimingPitTime,
    UpdateTimingKartStatus,
    UpdateTimingFixedKartStatus,
    UpdateTimingNumberPits,
)
from tests.helpers import DatabaseTest
from tests.mocks.logging import FakeLogger


class TestTimingManager(DatabaseTest):
    """Test class ltsapi.managers.competitions.TimingManager."""

    EXCLUDE = {
        'insert_date': True,
        'update_date': True,
    }

    @pytest.mark.parametrize(
        'competition_id, expected_items',
        [
            (
                2,  # competition_id
                [
                    {
                        'team_id': 4,
                        'driver_id': 5,
                        'participant_code': 'team-1',
                        'position': 1,
                        'last_time': 58800,
                        'best_time': 58800,
                        'lap': 2,
                        'gap': 0,
                        'gap_unit': LengthUnit.MILLIS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.MILLIS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': None,
                        'kart_status': KartStatus.GOOD.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 5,
                        'driver_id': 7,
                        'participant_code': 'team-2',
                        'position': 2,
                        'last_time': 59700,
                        'best_time': 59500,
                        'lap': 2,
                        'gap': 1400,
                        'gap_unit': LengthUnit.MILLIS.value,
                        'interval': 1400,
                        'interval_unit': LengthUnit.MILLIS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': None,
                        'kart_status': KartStatus.BAD.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
            ),
        ])
    def test_get_current_all_by_id(
            self,
            competition_id: int,
            expected_items: list,
            db_context: DBContext,
            fake_logger: FakeLogger) -> None:
        """Test method get_current_all_by_id."""
        manager = TimingManager(db=db_context, logger=fake_logger)
        dict_items = [x.dict(exclude=self.EXCLUDE)
                      for x in manager.get_current_all_by_id(competition_id)]
        assert dict_items == expected_items

    @pytest.mark.parametrize(
        'competition_id, team_id, driver_id, expected_item',
        [
            (
                2,  # competition_id
                5,  # team_id
                None,  # driver_id
                {
                    'team_id': 5,
                    'driver_id': 7,
                    'participant_code': 'team-2',
                    'position': 2,
                    'last_time': 59700,
                    'best_time': 59500,
                    'lap': 2,
                    'gap': 1400,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 1400,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.BAD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                None,  # team_id
                7,  # driver_id
                {
                    'team_id': 5,
                    'driver_id': 7,
                    'participant_code': 'team-2',
                    'position': 2,
                    'last_time': 59700,
                    'best_time': 59500,
                    'lap': 2,
                    'gap': 1400,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 1400,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.BAD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
        ])
    def test_get_current_single_by_id(
            self,
            competition_id: int,
            team_id: Optional[int],
            driver_id: Optional[int],
            expected_item: dict,
            db_context: DBContext,
            fake_logger: FakeLogger) -> None:
        """Test method get_current_single_by_id."""
        manager = TimingManager(db=db_context, logger=fake_logger)

        db_item = manager.get_current_single_by_id(
            competition_id, team_id=team_id, driver_id=driver_id)
        assert db_item is not None

        dict_item = db_item.dict(exclude=self.EXCLUDE)
        assert dict_item == expected_item

    @pytest.mark.parametrize(
        'competition_id, expected_items',
        [
            (
                2,  # competition_id
                [
                    {
                        'team_id': 4,
                        'driver_id': 5,
                        'participant_code': 'team-1',
                        'position': 1,
                        'last_time': 0,
                        'best_time': 0,
                        'lap': 0,
                        'gap': 0,
                        'gap_unit': LengthUnit.MILLIS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.MILLIS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': None,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 5,
                        'driver_id': 7,
                        'participant_code': 'team-2',
                        'position': 2,
                        'last_time': 0,
                        'best_time': 0,
                        'lap': 0,
                        'gap': 0,
                        'gap_unit': LengthUnit.MILLIS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.MILLIS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': None,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 4,
                        'driver_id': 5,
                        'participant_code': 'team-1',
                        'position': 1,
                        'last_time': 59000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.MILLIS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.MILLIS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': None,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 5,
                        'driver_id': 7,
                        'participant_code': 'team-2',
                        'position': 2,
                        'last_time': 59500,
                        'best_time': 59500,
                        'lap': 1,
                        'gap': 500,
                        'gap_unit': LengthUnit.MILLIS.value,
                        'interval': 500,
                        'interval_unit': LengthUnit.MILLIS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': None,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 4,
                        'driver_id': 5,
                        'participant_code': 'team-1',
                        'position': 1,
                        'last_time': 58800,
                        'best_time': 58800,
                        'lap': 2,
                        'gap': 0,
                        'gap_unit': LengthUnit.MILLIS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.MILLIS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': None,
                        'kart_status': KartStatus.GOOD.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 5,
                        'driver_id': 7,
                        'participant_code': 'team-2',
                        'position': 2,
                        'last_time': 59700,
                        'best_time': 59500,
                        'lap': 2,
                        'gap': 1400,
                        'gap_unit': LengthUnit.MILLIS.value,
                        'interval': 1400,
                        'interval_unit': LengthUnit.MILLIS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': None,
                        'kart_status': KartStatus.BAD.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
            ),
        ])
    def test_get_history_by_id(
            self,
            competition_id: int,
            expected_items: List[dict],
            db_context: DBContext,
            fake_logger: FakeLogger) -> None:
        """Test method get_history_by_id."""
        manager = TimingManager(db=db_context, logger=fake_logger)
        dict_items = [x.dict(exclude=self.EXCLUDE)
                      for x in manager.get_history_by_id(competition_id)]
        assert dict_items == expected_items

    @pytest.mark.parametrize(
        'competition_id, start_position, end_position, expected_items',
        [
            (
                1,  # competition_id
                2,  # start_position
                3,  # end_position
                [
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 3,
                        'driver_id': None,
                        'participant_code': 'team-3',
                        'position': 3,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
            ),
        ])
    def test_get_current_between_positions(
            self,
            competition_id: int,
            start_position: int,
            end_position: int,
            expected_items: List[dict],
            db_context: DBContext,
            fake_logger: FakeLogger) -> None:
        """Test method get_current_between_positions."""
        manager = TimingManager(db=db_context, logger=fake_logger)
        items = manager.get_current_between_positions(
            competition_id, start_position, end_position)
        dict_items = [x.dict(exclude=self.EXCLUDE) for x in items]
        assert dict_items == expected_items

    @pytest.mark.parametrize(
        'competition_id, team_id, update_data, expected_item',
        [
            (
                2,  # competition_id
                4,  # team_id
                UpdateTiming(  # update_data
                    driver_id=5,
                    position=1,
                    last_time=58400,
                    best_time=58500,
                    lap=2,
                    gap=0,
                    gap_unit=LengthUnit.MILLIS,
                    interval=0,
                    interval_unit=LengthUnit.MILLIS,
                    stage=CompetitionStage.RACE,
                    pit_time=None,
                    kart_status=KartStatus.GOOD,
                    fixed_kart_status=None,
                    number_pits=0,
                    auto_best_time=False,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58400,
                    'best_time': 58500,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTiming(  # update_data
                    driver_id=5,
                    position=1,
                    last_time=58400,
                    best_time=58500,
                    lap=2,
                    gap=0,
                    gap_unit=LengthUnit.MILLIS,
                    interval=0,
                    interval_unit=LengthUnit.MILLIS,
                    stage=CompetitionStage.RACE,
                    pit_time=None,
                    kart_status=KartStatus.GOOD,
                    fixed_kart_status=None,
                    number_pits=0,
                    auto_best_time=True,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58400,
                    'best_time': 58500,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingDriver(  # update_data
                    driver_id=6,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 6,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58800,
                    'best_time': 58800,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingPosition(  # update_data
                    position=2,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 2,
                    'last_time': 58800,
                    'best_time': 58800,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingLastTime(  # update_data
                    last_time=58400,
                    auto_best_time=False,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58400,
                    'best_time': 58800,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingLastTime(  # update_data
                    last_time=58400,
                    auto_best_time=True,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58400,
                    'best_time': 58400,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingBestTime(  # update_data
                    best_time=58400,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58800,
                    'best_time': 58400,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingLap(  # update_data
                    lap=3,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58800,
                    'best_time': 58800,
                    'lap': 3,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingGap(  # update_data
                    gap=500,
                    gap_unit=LengthUnit.MILLIS,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58800,
                    'best_time': 58800,
                    'lap': 2,
                    'gap': 500,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingInterval(  # update_data
                    interval=500,
                    interval_unit=LengthUnit.MILLIS,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58800,
                    'best_time': 58800,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 500,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingStage(  # update_data
                    stage=CompetitionStage.QUALIFYING,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58800,
                    'best_time': 58800,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.QUALIFYING.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingPitTime(  # update_data
                    pit_time=50000,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58800,
                    'best_time': 58800,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': 50000,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingKartStatus(  # update_data
                    kart_status=KartStatus.BAD,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58800,
                    'best_time': 58800,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.BAD.value,
                    'fixed_kart_status': None,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingFixedKartStatus(  # update_data
                    fixed_kart_status=KartStatus.BAD,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58800,
                    'best_time': 58800,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': KartStatus.BAD.value,
                    'number_pits': 0,
                },
            ),
            (
                2,  # competition_id
                4,  # team_id
                UpdateTimingNumberPits(  # update_data
                    number_pits=1,
                ),
                {  # expected_item
                    'team_id': 4,
                    'driver_id': 5,
                    'participant_code': 'team-1',
                    'position': 1,
                    'last_time': 58800,
                    'best_time': 58800,
                    'lap': 2,
                    'gap': 0,
                    'gap_unit': LengthUnit.MILLIS.value,
                    'interval': 0,
                    'interval_unit': LengthUnit.MILLIS.value,
                    'stage': CompetitionStage.RACE.value,
                    'pit_time': None,
                    'kart_status': KartStatus.GOOD.value,
                    'fixed_kart_status': None,
                    'number_pits': 1,
                },
            ),
        ])
    def test_update_by_id(
            self,
            competition_id: int,
            team_id: int,
            update_data: TypeUpdateTiming,
            expected_item: dict,
            db_context: DBContext,
            fake_logger: FakeLogger) -> None:
        """Test method update_by_id."""
        manager = TimingManager(db=db_context, logger=fake_logger)

        before_item = manager.get_current_single_by_id(
            competition_id, team_id=team_id)
        assert before_item is not None

        time.sleep(1)
        manager.update_by_id(update_data, competition_id, team_id=team_id)

        after_item = manager.get_current_single_by_id(
            competition_id, team_id=team_id)
        assert after_item is not None
        dict_item = after_item.dict(exclude=self.EXCLUDE)

        assert dict_item == expected_item
        assert before_item.insert_date == after_item.insert_date
        assert before_item.update_date < after_item.update_date

        # Validate history
        history = manager.get_history_by_id(competition_id, team_id=team_id)
        dict_item = history[-1].dict(exclude=self.EXCLUDE)
        assert dict_item == expected_item

    @pytest.mark.parametrize(
        ('competition_id, team_id, update_data,'
         'expected_current, expected_history'),
        [
            # Test case: instance of UpdateTimingPosition to modify the
            # position as well as other participant's positions
            (
                1,  # competition_id
                1,  # team_id
                UpdateTimingPosition(  # update_data
                    position=2,
                    auto_other_positions=True,
                ),
                [  # expected_current
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 1,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 3,
                        'driver_id': None,
                        'participant_code': 'team-3',
                        'position': 3,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
                [  # expected_history
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 1,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 3,
                        'driver_id': None,
                        'participant_code': 'team-3',
                        'position': 3,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 1,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
            ),
            # Test case: instance of UpdateTimingPosition to modify the
            # position, but do not modify other participant's positions
            (
                1,  # competition_id
                1,  # team_id
                UpdateTimingPosition(  # update_data
                    position=2,
                    auto_other_positions=False,
                ),
                [  # expected_current
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 3,
                        'driver_id': None,
                        'participant_code': 'team-3',
                        'position': 3,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
                [  # expected_history
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 1,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 3,
                        'driver_id': None,
                        'participant_code': 'team-3',
                        'position': 3,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
            ),
            # Test case: instance of UpdateTiming to modify the position to a
            # middle one, so only some participants move up one place
            (
                1,  # competition_id
                1,  # team_id
                UpdateTiming(  # update_data
                    driver_id=1,
                    position=2,
                    last_time=60000,
                    best_time=59000,
                    lap=1,
                    gap=0,
                    gap_unit=LengthUnit.LAPS,
                    interval=0,
                    interval_unit=LengthUnit.LAPS,
                    stage=CompetitionStage.RACE,
                    pit_time=35000,
                    kart_status=KartStatus.UNKNOWN,
                    fixed_kart_status=None,
                    number_pits=0,
                    auto_other_positions=True,
                ),
                [  # expected_current
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 1,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 3,
                        'driver_id': None,
                        'participant_code': 'team-3',
                        'position': 3,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
                [  # expected_history
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 1,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 3,
                        'driver_id': None,
                        'participant_code': 'team-3',
                        'position': 3,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 1,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
            ),
            # Test case: instance of UpdateTiming to modify the
            # position to the last one, so all participants move up one place
            (
                1,  # competition_id
                1,  # team_id
                UpdateTiming(  # update_data
                    driver_id=1,
                    position=3,
                    last_time=60000,
                    best_time=59000,
                    lap=1,
                    gap=0,
                    gap_unit=LengthUnit.LAPS,
                    interval=0,
                    interval_unit=LengthUnit.LAPS,
                    stage=CompetitionStage.RACE,
                    pit_time=35000,
                    kart_status=KartStatus.UNKNOWN,
                    fixed_kart_status=None,
                    number_pits=0,
                    auto_other_positions=True,
                ),
                [  # expected_current
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 3,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 1,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 3,
                        'driver_id': None,
                        'participant_code': 'team-3',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
                [  # expected_history
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 1,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 3,
                        'driver_id': None,
                        'participant_code': 'team-3',
                        'position': 3,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 2,
                        'driver_id': 3,
                        'participant_code': 'team-2',
                        'position': 1,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 3,
                        'driver_id': None,
                        'participant_code': 'team-3',
                        'position': 2,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                    {
                        'team_id': 1,
                        'driver_id': 1,
                        'participant_code': 'team-1',
                        'position': 3,
                        'last_time': 60000,
                        'best_time': 59000,
                        'lap': 1,
                        'gap': 0,
                        'gap_unit': LengthUnit.LAPS.value,
                        'interval': 0,
                        'interval_unit': LengthUnit.LAPS.value,
                        'stage': CompetitionStage.RACE.value,
                        'pit_time': 35000,
                        'kart_status': KartStatus.UNKNOWN.value,
                        'fixed_kart_status': None,
                        'number_pits': 0,
                    },
                ],
            ),
        ],
    )
    def test_update_by_id_with_other_positions(
            self,
            competition_id: int,
            team_id: int,
            update_data: Union[UpdateTiming, UpdateTimingPosition],
            expected_current: list,
            expected_history: list,
            db_context: DBContext,
            fake_logger: FakeLogger) -> None:
        """
        Test method update_by_id modifies other participant's positions too.
        """
        manager = TimingManager(db=db_context, logger=fake_logger)
        manager.update_by_id(update_data, competition_id, team_id=team_id)

        # Validate that the current timing has been updated
        items = manager.get_current_all_by_id(competition_id)
        assert items is not None
        current_timing = [x.dict(exclude=self.EXCLUDE) for x in items]
        assert current_timing == expected_current

        # Validate that the history timing contains the latest information
        items = manager.get_history_by_id(competition_id=competition_id)
        assert items is not None
        history_timing = [x.dict(exclude=self.EXCLUDE) for x in items]
        assert history_timing == expected_history
